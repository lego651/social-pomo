{"version":3,"sources":["actions/index.js","pages/Login/index.jsx","actions/authAction.js","utils/firebase.js","components/Pomodoro/index.jsx","utils/util.js","components/Chatroom/index.jsx","actions/roomAction.js","pages/Room/index.jsx","App.js","serviceWorker.js","reducers/authReducer.js","reducers/roomReducer.js","reducers/index.js","store/index.js","index.js"],"names":["CONSTANTS","LOG_IN","GET_MESSAGES","Login","state","username","e","this","setState","target","value","preventDefault","trim","length","props","loginUser","className","id","onSubmit","handleSubmit","type","name","placeholder","onChange","handleChange","Component","connect","dispatch","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","settings","timestampsInSnapshots","Pomodoro","subscribeReadyCount","doc","readyCount","data","handleStart","handleReset","ref","firestore","collection","unsubsrcibe","sec","ready","on","prevState","interval","setInterval","count","clearInterval","axios","get","then","res","catch","err","console","log","unsubscribe","onSnapshot","time","Math","floor","round","Button","variant","color","onClick","getReady","getReset","Chatroom","onUpdateMessages","snapshot","messages","forEach","push","userHandle","content","createdAt","newMessage","addMessage","orderBy","map","m","key","messageId","TextField","label","fullWidth","auth","post","Room","Grid","container","spacing","item","xs","defaults","baseURL","App","Boolean","window","location","hostname","match","initialState","authReducer","action","roomReducer","payload","combineReducers","room","store","createStore","rootReducer","compose","applyMiddleware","thunkMiddleware","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.4c3da93e.chunk.js","sourcesContent":["export * from './authAction';\nexport * from './roomAction';\n\nexport const CONSTANTS = {\n    LOG_IN: 'LOG_IN',\n    GET_MESSAGES: 'GET_MESSAGES',\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { loginUser } from '../../actions';\n\nimport './style.css'\n\nclass Login extends Component {\n  constructor(){\n    super()\n    this.state = {\n      username: \"\"\n    }\n  }\n\n  handleChange(e) {\n    this.setState({\n      username: e.target.value\n    })\n  }\n\n  handleSubmit(e) {\n    e.preventDefault()\n    if(this.state.username.trim().length > 0) {\n      this.props.loginUser(this.state.username)\n    }\n  }\n\n  render(){\n    return(\n      <div className=\"login-container\">\n        <div className=\"login-form\">\n          <form id=\"serUsername\"\n                onSubmit={(e)=>{this.handleSubmit(e)}}>\n            <input type=\"text\"\n                   className=\"username\"\n                   name=\"username\"\n                   placeholder=\"Type your username...\"\n                   onChange={(e)=>{this.handleChange(e)}} />\n            <input type=\"submit\"\n                   className=\"submit-button\"\n                   value=\"Join the DoorDash Chat!\" />\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  loginUser: (username) => dispatch(loginUser(username)),\n})\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Login)\n","import { CONSTANTS } from '../actions'\n\nexport const loginUser = (username) => {\n  return dispatch => {\n    return dispatch({\n      type: CONSTANTS.LOG_IN,\n      username,\n    })\n  }\n}\n","import * as firebase from 'firebase';\nimport firestore from 'firebase/firestore'\n\nconst settings = {timestampsInSnapshots: true};\n\n// // Official Recommended Settings\n// // Your web app's Firebase configuration\n// var firebaseConfig = {\n//   apiKey: \"AIzaSyBuRc03LvtY55WHAkzyUfaNInvRPsp5Enc\",\n//   authDomain: \"social-pomo-94112.firebaseapp.com\",\n//   databaseURL: \"https://social-pomo-94112.firebaseio.com\",\n//   projectId: \"social-pomo-94112\",\n//   storageBucket: \"social-pomo-94112.appspot.com\",\n//   messagingSenderId: \"105418250972\",\n//   appId: \"1:105418250972:web:ac64214fc0c27528bdf219\",\n//   measurementId: \"G-2JGFMCP86V\"\n// };\n// // Initialize Firebase\n// firebase.initializeApp(firebaseConfig);\n// firebase.analytics();\n\nconst config = {\n  apiKey: \"AIzaSyBuRc03LvtY55WHAkzyUfaNInvRPsp5Enc\",\n  authDomain: \"social-pomo-94112.firebaseapp.com\",\n  databaseURL: \"https://social-pomo-94112.firebaseio.com\",\n  projectId: \"social-pomo-94112\",\n  storageBucket: \"social-pomo-94112.appspot.com\",\n  messagingSenderId: \"105418250972\"\n};\nfirebase.initializeApp(config);\n// firebase.analytics();\nfirebase.firestore().settings(settings);\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { Button } from '@material-ui/core';\n\nimport { parseTime } from '../../utils/util.js';\nimport firebase from '../../utils/firebase.js';\nimport './style.css';\n\nclass Pomodoro extends Component {\n  constructor(props) {\n    super(props);\n    this.ref = firebase.firestore().collection('meta').doc('us');\n    this.unsubsrcibe = null;\n    this.state = {\n      sec: 10,\n      ready: false,\n      readyCount: 0,\n      on: false,\n    }\n  }\n  count() {\n    if(this.state.on) {\n      if(this.state.sec > 0) {\n        this.setState(prevState => ({ sec: prevState.sec - 1 }))\n      }\n    } else {\n      this.setState({\n        sec: 0,\n        on: false\n      })\n    }\n  }\n  handleStart() {\n    this.setState({\n      on: true\n    })\n    this.interval = setInterval(() => {this.count()}, 1000);\n  }\n  // handlePause() {\n  //   this.setState({\n  //     on: false,\n  //   })\n  //   clearInterval(this.interval);\n  // }\n  handleReset() {\n    this.setState({\n      sec: 10,\n      on: false\n    })\n    clearInterval(this.interval);\n  }\n  subscribeReadyCount = (doc) => {\n    this.setState({\n      readyCount: doc.data().readyCount,\n    })\n    if(doc.data().readyCount === 2) {\n      this.handleStart();\n    }\n    if(doc.data().readyCount === 0) {\n      this.handleReset();\n    }\n  }\n  getReady() {\n    axios\n      .get('/readyaddone')\n      .then((res) => {\n        // console.log(res);\n        this.setState({\n          ready: true\n        })\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n  }\n  getReset() {\n    axios\n      .get('/readyminusone')\n      .then((res) => {\n        // console.log(res);\n        this.setState({\n          ready: false\n        })\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n  }\n  componentDidMount() {\n    this.unsubscribe = this.ref.onSnapshot(this.subscribeReadyCount);\n  }\n  render(){\n    // 当 readyCount == 1的时候，有下面情况\n    // on == true & ready = true: 显示 Continue\n    // on == false & ready = true: 显示 Waiting...\n    // on == true & ready = false: 显示 waiting...\n    // on == false & ready = false: 显示 Ready...\n    console.log(this.state.readyCount);\n    return(\n      <div className=\"pomodoro-container\">\n        <h2> {parseTime(this.state.sec)} </h2>\n        {\n          this.state.readyCount === 0\n          ? // 如果readyCount === 0, 两边一定都是Ready!\n            <Button variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => { this.getReady() }}>\n              Ready!\n            </Button>\n          : // readyCount === 1 或者 2\n            this.state.readyCount === 1\n            ? // readyCount == 1\n              this.state.on && this.state.ready\n              ? // 如果on == true, 并且 ready == true, 才会显示Continue..,\n                <Button variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => { this.getReset() }}>\n                  Continue\n                </Button>\n              :\n                this.state.on == false && !this.state.ready// 此时显示Ready...\n                ?\n                  <Button variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => { this.getReady() }}>\n                    Ready!\n                  </Button>\n                : // 否则显示Waiting...\n                  <Button variant=\"contained\"\n                          color=\"primary\">\n                    Waiting...\n                  </Button>\n            : // 否则 readyCount == 2\n              <Button variant=\"contained\"\n                      color=\"primary\"\n                      onClick={() => { this.getReset() }}>\n                Continue\n              </Button>\n        }\n\n\n      </div>\n    )\n  }\n}\n\nexport default Pomodoro\n","\nexport const parseTime = (time) => {\n  let min = Math.floor(time / 60);\n  let sec = Math.round(time % 60);\n  return min + \" : \" + sec;\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport firebase from '../../utils/firebase.js';\nimport './style.css';\nimport { addMessage } from '../../actions';\n\n// import TextField from '@material-ui/core/TextField';\n// import Button from '@material-ui/core/Button';\nimport { TextField, Button } from '@material-ui/core';\n\n\nclass Chatroom extends Component {\n  constructor(props) {\n    super(props);\n    this.ref = firebase.firestore().collection('messages');\n    this.unsubscribe = null;\n    this.state = {\n      messages: [],\n      content: ''\n    }\n  }\n  onUpdateMessages = (snapshot) => {\n    const messages = [];\n    snapshot.forEach((doc) => {\n      messages.push({\n        userHandle: doc.data().userHandle,\n        content: doc.data().content,\n        createdAt: doc.data().createdAt\n      })\n    });\n    // messages.sort((a,b) => a.createdAt - b.createdAt);\n    this.setState({\n      messages\n    });\n  }\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n    const newMessage = {\n      userHandle: this.props.username,\n      content: this.state.content\n    }\n    this.props.addMessage(newMessage);\n    this.setState({\n      content: ''\n    })\n  }\n  componentDidMount() {\n    this.unsubscribe = this.ref.orderBy('createdAt').onSnapshot(this.onUpdateMessages);\n  }\n  render(){\n    return(\n      <div className=\"chatroom-container\">\n        {\n          this.state.messages.map(m =>\n            <div key={m.messageId}> {m.content} </div>\n          )\n        }\n        <div className=\"chatroom-input\">\n          <form onSubmit={(e) => {this.handleSubmit(e)}}>\n            <TextField\n              type=\"text\"\n              name=\"content\"\n              label=\"content\"\n              onChange={(e) => {this.handleChange(e)}}\n              value={this.state.content}\n              fullWidth\n            />\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Submit\n            </Button>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  username: state.auth.username\n})\nconst mapDispatchToProps = (dispatch) => ({\n  addMessage: (newMessage) => dispatch(addMessage(newMessage)),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Chatroom);\n","import axios from 'axios';\nimport { CONSTANTS } from '../actions';\n\nexport const loginUser = (username) => {\n  return dispatch => {\n    return dispatch({\n      type: CONSTANTS.LOG_IN,\n      username,\n    })\n  }\n}\n\nexport const getMessages = () => (dispatch) => {\n  axios\n    .get('/messages')\n    .then((res) => {\n      dispatch({\n        type: CONSTANTS.GET_MESSAGES,\n        payload: res.data\n      })\n    })\n    .catch((err) => {\n      console.log(err);\n    })\n}\n\nexport const addMessage = (newMessage) => (dispatch) => {\n  axios\n    .post('/message', newMessage)\n    .then((res) => {\n      console.log(res);\n    })\n    .catch((err) => {\n      console.log(err);\n    })\n}\n\n// export const getReady = () => (dispatch) => {\n//   axios\n//     .get('/readyaddone')\n//     .then((res) => {\n//       console.log(res);\n//     })\n//     .catch((err) => {\n//       console.log(err);\n//     })\n// }\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Grid } from '@material-ui/core';\n// Components\nimport Pomodoro from '../../components/Pomodoro';\nimport Chatroom from '../../components/Chatroom';\n// Actions\n// import { getReady } from '../../actions';\nimport './style.css';\n\nclass Room extends Component {\n  render(){\n    return(\n      <div className=\"room-container\">\n        <Grid container spacing={2}>\n          <Grid item xs={6}>\n            <Pomodoro />\n          </Grid>\n          <Grid item xs={6}>\n            <Chatroom />\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default Room\n// const mapStateToProps = (state) => ({\n//   messages: state.room.messages,\n// });\n// const mapDispatchToProps = (dispatch) => ({\n//   getMessages: () => dispatch(getMessages()),\n// });\n// export default connect(\n//   mapStateToProps,\n//   mapDispatchToProps\n// )(Room);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// Pages\nimport Login from './pages/Login';\nimport Room from './pages/Room';\n\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://us-central1-social-pomo-94112.cloudfunctions.net/api';\n\nclass App extends Component {\n  render() {\n    const { username } = this.props\n    return (\n      <div className=\"app-container\">\n        {\n          username\n          ? <Room />\n          : <Login />\n        }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  username: state.auth.username\n})\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CONSTANTS } from '../actions';\n\nconst initialState = {\n  username: null\n}\n\nconst authReducer = (state=initialState, action) => {\n  switch(action.type) {\n    case CONSTANTS.LOG_IN:\n      return {\n        ...state,\n        username: action.username\n      };\n    default:\n      return state;\n  }\n}\n\nexport default authReducer\n","import { CONSTANTS } from '../actions';\n\nconst initialState = {\n  messages: []\n}\n\nconst roomReducer = (state=initialState, action) => {\n  switch(action.type) {\n    case CONSTANTS.GET_MESSAGES:\n      return {\n        ...state,\n        messages: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\nexport default roomReducer\n","import { combineReducers } from 'redux';\nimport authReducer from './authReducer';\nimport roomReducer from './roomReducer';\n\nexport default combineReducers({\n  auth: authReducer,\n  room: roomReducer\n});\n","import { createStore, compose, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\n\nimport rootReducer from '../reducers'\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunkMiddleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n  // compose(\n  //   applyMiddleware(thunkMiddleware)\n  // )\n)\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}